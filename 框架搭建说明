第1步：idea左上角File右键新建Project，选择Spring Initializr ，然后选择默认的 url 点击【Next】：修改项目信息（Group和Artifact，
        根据项目需要自定义名字），点击【Next】：勾选上 Web 模板，点击【Next】完成。
第2步：src下新建测试Controller类（见testCtrl），类上的注解要添加@Controller(),@RequestMapping(value="/ontrollerName")
第3步：1）Controller中新建测试方法，方法上用到的注解@RequestMapping(value = "/hello",method = RequestMethod.GET)，
            method不写默认get方式（浏览器访问只支持get方式）,一般使用method = RequestMethod.POST,安全性高，可借助Postman工具访问；
      2）方法返回值前面添加@ResponseBody注解
第4步：启动服务，右键Application，run，访问http://localhost:8080/ontrollerName/hello，成功访问代表框架搭建成功。
(注意：如果Controller类上的注解@Controller()改成@RestController(),那么里面的方法在返回值前面就不需要添加@ResponseBody注解，
    换句话说@RestController()注解是 @Controller() 和 @ResponseBody 注解的合体版，见testCtrl2类)
第5步：根据项目需要修改配置文件：application.properties，该文件添加全局的项目配置，如使用语言等
    通常将application.properties作为总的配置文件，如果开发中分本地/测试/生产等环境，可分别设置不同环境的配置文件，如：
    本地：application-local.properties
    生产：application-pro.properties
    然后在总的配置文件application.properties指定当前使用哪个配置文件：spring.profiles.active=local，代表使用application-local.properties


SpringBoot项目说明：
    1.入口类ReportApplication（都是 项目名+Application）
    @SpringBootApplication 是 Spring Boot 的核心注解，它是一个组合注解，该注解组合了：@Configuration、@EnableAutoConfiguration、@ComponentScan；
     若不是用 @SpringBootApplication 注解也可以使用这三个注解代替。
        1）其中，@EnableAutoConfiguration 让 Spring Boot 根据类路径中的 jar 包依赖为当前项目进行自动配置，
            例如，添加了 spring-boot-starter-web 依赖，会自动添加 Tomcat 和 Spring MVC 的依赖，那么 Spring Boot 会对 Tomcat 和 Spring MVC 进行自动配置。
        2）Spring Boot 还会自动扫描 @SpringBootApplication 所在类的同级包以及下级包里的 Bean ，所以入口类建议就配置在
            grounpID + arctifactID 组合的包名下（这里为 com.inspur.report 包）,之后添加的类都添加到com.inspur.report下或者
            com.inspur.report.package下，与入口类同级或者在入口类的下级。
     2.Spring Boot 的配置文件
       Spring Boot 使用一个全局的配置文件 application.properties 或 application.yml，放置在【src/main/resources】目录或者类路径的 /config 下。
       Spring Boot 不仅支持常规的 properties 配置文件，还支持 yaml 语言的配置文件。yaml 是以数据为中心的语言，在配置数据的时候具有面向对象的特征。
       Spring Boot 的全局配置文件的作用是对一些默认配置的配置值进行修改。